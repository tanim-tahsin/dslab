//Task 1: Array Operations
#include <stdio.h>

int main() {
    int arr[100] = {12, 7, 19, 3, 15};
    int n = 5;  // Current size of array
    int i, pos, value;

    // Display original array
    printf("Original array: ");
    for(i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    // Insert 99 at position 2
    pos = 2;
    value = 99;
    for(i = n; i > pos; i--) {
        arr[i] = arr[i - 1];
    }
    arr[pos] = value;
    n++;
    printf("After inserting %d at position %d: ", value, pos);
    for(i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    // Delete element at position 3
    pos = 3;
    for(i = pos; i < n - 1; i++) {
        arr[i] = arr[i + 1];
    }
    n--;
    printf("After deleting element at position 3: ");
    for(i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    // Search for value 15
    value = 15;
    int found = 0;
    for(i = 0; i < n; i++) {
        if(arr[i] == value) {
            printf("Element %d found at index %d\n", value, i);
            found = 1;
            break;
        }
    }
    if(!found) {
        printf("Element %d not found.\n", value);
    }

    return 0;
}


// Task 2: Singly Linked List Operations
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}

// Insert at end
void insertEnd(struct Node** head, int value) {
    struct Node* newNode = createNode(value);
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL)
            temp = temp->next;
        temp->next = newNode;
    }
}

// Insert at position
void insertAtPos(struct Node** head, int value, int pos) {
    struct Node* newNode = createNode(value);
    if (pos == 0) {
        newNode->next = *head;
        *head = newNode;
    } else {
        struct Node* temp = *head;
        for (int i = 0; i < pos - 1 && temp != NULL; i++) {
            temp = temp->next;
        }
        if (temp != NULL) {
            newNode->next = temp->next;
            temp->next = newNode;
        } else {
            printf("Invalid position\n");
        }
    }
}

// Delete from position
void deleteAtPos(struct Node** head, int pos) {
    if (*head == NULL) return;

    struct Node* temp = *head;

    if (pos == 0) {
        *head = temp->next;
        free(temp);
    } else {
        for (int i = 0; i < pos - 1 && temp->next != NULL; i++) {
            temp = temp->next;
        }
        if (temp->next != NULL) {
            struct Node* toDelete = temp->next;
            temp->next = toDelete->next;
            free(toDelete);
        } else {
            printf("Invalid position\n");
        }
    }
}

// Search for a value
void search(struct Node* head, int value) {
    int index = 0;
    while (head != NULL) {
        if (head->data == value) {
            printf("Element %d found at index %d\n", value, index);
            return;
        }
        head = head->next;
        index++;
    }
    printf("Element %d not found\n", value);
}

// Display list
void display(struct Node* head) {
    printf("Linked List: ");
    while (head != NULL) {
        printf("%d -> ", head->data);
        head = head->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* head = NULL;

    // Insert 10, 20, 30 at end
    insertEnd(&head, 10);
    insertEnd(&head, 20);
    insertEnd(&head, 30);
    display(head);

    // Insert 15 at position 2
    insertAtPos(&head, 15, 2);
    display(head);

    // Delete element at position 3
    deleteAtPos(&head, 3);
    display(head);

    // Search for 15
    search(head, 15);

    return 0;
}


// Task 3: Doubly Linked List Operations
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
};

// Create new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->prev = NULL;
    newNode->next = NULL;
    return newNode;
}

// Insert at end
void insertEnd(struct Node** head, int value) {
    struct Node* newNode = createNode(value);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* temp = *head;
    while (temp->next != NULL)
        temp = temp->next;
    temp->next = newNode;
    newNode->prev = temp;
}

// Delete at position
void deleteAtPos(struct Node** head, int pos) {
    if (*head == NULL) return;

    struct Node* temp = *head;
    int i = 0;
    while (temp != NULL && i < pos) {
        temp = temp->next;
        i++;
    }

    if (temp == NULL) {
        printf("Invalid position\n");
        return;
    }

    if (temp->prev != NULL)
        temp->prev->next = temp->next;
    else
        *head = temp->next;

    if (temp->next != NULL)
        temp->next->prev = temp->prev;

    free(temp);
}

// Reverse and display list
void reverseDisplay(struct Node* head) {
    if (head == NULL) {
        printf("List is empty\n");
        return;
    }

    // Go to last node
    struct Node* tail = head;
    while (tail->next != NULL)
        tail = tail->next;

    // Print in reverse
    printf("Reversed List: ");
    while (tail != NULL) {
        printf("%d <-> ", tail->data);
        tail = tail->prev;
    }
    printf("NULL\n");
}

// Display normally
void display(struct Node* head) {
    printf("List: ");
    while (head != NULL) {
        printf("%d <-> ", head->data);
        head = head->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* head = NULL;

    // Insert 5, 10, 15, 20 at end
    insertEnd(&head, 5);
    insertEnd(&head, 10);
    insertEnd(&head, 15);
    insertEnd(&head, 20);
    display(head);

    // Delete second element (position 1)
    deleteAtPos(&head, 1);
    display(head);

    // Reverse and display
    reverseDisplay(head);

    return 0;
}


// Task 4: Stack Using Array
#include <stdio.h>

#define SIZE 100

int stack[SIZE];
int top = -1;

// Push element
void push(int value) {
    if (top == SIZE - 1) {
        printf("Stack Overflow\n");
    } else {
        top++;
        stack[top] = value;
    }
}

// Pop element
void pop() {
    if (top == -1) {
        printf("Stack Underflow\n");
    } else {
        printf("Popped: %d\n", stack[top]);
        top--;
    }
}

// Display stack
void display() {
    if (top == -1) {
        printf("Stack is empty\n");
    } else {
        printf("Current Stack: ");
        for (int i = top; i >= 0; i--) {
            printf("%d ", stack[i]);
        }
        printf("\n");
    }
}

int main() {
    // Push 5, 10, 15
    push(5);
    push(10);
    push(15);
    display();

    // Pop top element
    pop();
    display();

    return 0;
}



// Task 5: Stack Using Linked List
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* top = NULL;

// Push operation
void push(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = top;
    top = newNode;
}

// Pop operation
void pop() {
    if (top == NULL) {
        printf("Stack Underflow\n");
    } else {
        printf("Popped: %d\n", top->data);
        struct Node* temp = top;
        top = top->next;
        free(temp);
    }
}

// Display stack
void display() {
    struct Node* temp = top;
    if (temp == NULL) {
        printf("Stack is empty\n");
        return;
    }
    printf("Current Stack: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    // Push 50, 40, 30
    push(50);
    push(40);
    push(30);
    display();

    // Pop top element
    pop();
    display();

    return 0;
}


// Task 6: Parenthesis Balancing Using Stack
#include <stdio.h>
#include <string.h>

#define SIZE 100

char stack[SIZE];
int top = -1;

// Push character to stack
void push(char ch) {
    if (top < SIZE - 1) {
        stack[++top] = ch;
    }
}

// Pop character from stack
char pop() {
    if (top >= 0) {
        return stack[top--];
    }
    return '\0';
}

// Check if parentheses are balanced
int isBalanced(char expr[]) {
    top = -1;  // Reset stack
    for (int i = 0; i < strlen(expr); i++) {
        if (expr[i] == '(') {
            push('(');
        } else if (expr[i] == ')') {
            if (top == -1) {
                return 0;  // Extra closing bracket
            }
            pop();
        }
    }
    return top == -1;  // True if stack is empty
}

int main() {
    char expr1[] = "((()))";
    char expr2[] = "(()))";
    char expr3[] = "((())";

    printf("%s is %s\n", expr1, isBalanced(expr1) ? "Balanced" : "Not Balanced");
    printf("%s is %s\n", expr2, isBalanced(expr2) ? "Balanced" : "Not Balanced");
    printf("%s is %s\n", expr3, isBalanced(expr3) ? "Balanced" : "Not Balanced");

    return 0;
}


// Task 7: Binary Tree - Insert & Traversals
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Create new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// Insert in binary tree (BST style for simplicity)
struct Node* insert(struct Node* root, int value) {
    if (root == NULL) {
        return createNode(value);
    }
    if (value < root->data)
        root->left = insert(root->left, value);
    else
        root->right = insert(root->right, value);
    return root;
}

// Preorder traversal
void preorder(struct Node* root) {
    if (root != NULL) {
        printf("%d ", root->data);
        preorder(root->left);
        preorder(root->right);
    }
}

// Inorder traversal
void inorder(struct Node* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}

// Postorder traversal
void postorder(struct Node* root) {
    if (root != NULL) {
        postorder(root->left);
        postorder(root->right);
        printf("%d ", root->data);
    }
}

int main() {
    struct Node* root = NULL;

    // Insert elements: 50, 30, 70, 20, 40, 60, 80
    root = insert(root, 50);
    insert(root, 30);
    insert(root, 70);
    insert(root, 20);
    insert(root, 40);
    insert(root, 60);
    insert(root, 80);

    // Display traversals
    printf("Preorder: ");
    preorder(root);
    printf("\n");

    printf("Inorder: ");
    inorder(root);
    printf("\n");

    printf("Postorder: ");
    postorder(root);
    printf("\n");

    return 0;
}


// Task 8: Binary Search Tree - Insert, Search, Delete
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Create new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// Insert in BST
struct Node* insert(struct Node* root, int value) {
    if (root == NULL)
        return createNode(value);
    if (value < root->data)
        root->left = insert(root->left, value);
    else
        root->right = insert(root->right, value);
    return root;
}

// Search for a value
struct Node* search(struct Node* root, int value) {
    if (root == NULL || root->data == value)
        return root;
    if (value < root->data)
        return search(root->left, value);
    return search(root->right, value);
}

// Find minimum value node (for deletion)
struct Node* findMin(struct Node* root) {
    while (root->left != NULL)
        root = root->left;
    return root;
}

// Delete node
struct Node* deleteNode(struct Node* root, int value) {
    if (root == NULL)
        return root;

    if (value < root->data)
        root->left = deleteNode(root->left, value);
    else if (value > root->data)
        root->right = deleteNode(root->right, value);
    else {
        // Node with only one child or no child
        if (root->left == NULL) {
            struct Node* temp = root->right;
            free(root);
            return temp;
        } else if (root->right == NULL) {
            struct Node* temp = root->left;
            free(root);
            return temp;
        }

        // Node with two children: Get the inorder successor (smallest in the right subtree)
        struct Node* temp = findMin(root->right);

        // Copy the inorder successor's content to this node
        root->data = temp->data;

        // Delete the inorder successor
        root->right = deleteNode(root->right, temp->data);
    }
    return root;
}

int main() {
    struct Node* root = NULL;

    // Insert elements: 45, 25, 65, 15, 35, 55, 75
    root = insert(root, 45);
    insert(root, 25);
    insert(root, 65);
    insert(root, 15);
    insert(root, 35);
    insert(root, 55);
    insert(root, 75);

    // Search for 35
    struct Node* result = search(root, 35);
    if (result != NULL)
        printf("Element 35 found in the tree\n");
    else
        printf("Element 35 not found\n");

    // Delete node with value 25
    root = deleteNode(root, 25);
    printf("Deleted 25\n");

    // Search for 25 again
    result = search(root, 25);
    if (result != NULL)
        printf("Element 25 found in the tree\n");
    else
        printf("Element 25 not found\n");

    return 0;
}


// Task 9: Graph Representation Using Adjacency List
#include <stdio.h>

#define MAX_VERTICES 5

// Structure to represent a graph using adjacency list
struct Graph {
    int vertices;
    int adj[MAX_VERTICES][MAX_VERTICES];  // Adjacency matrix representation
};

// Function to initialize the graph
void initGraph(struct Graph* graph, int vertices) {
    graph->vertices = vertices;

    // Initialize adjacency matrix to 0
    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            graph->adj[i][j] = 0;
        }
    }
}

// Function to add an edge
void addEdge(struct Graph* graph, int src, int dest) {
    graph->adj[src][dest] = 1;
    graph->adj[dest][src] = 1;  // Since the graph is undirected
}

// Function to display the adjacency list
void displayGraph(struct Graph* graph) {
    for (int i = 0; i < graph->vertices; i++) {
        printf("Vertex %d: ", i);
        for (int j = 0; j < graph->vertices; j++) {
            if (graph->adj[i][j] == 1) {
                printf("%d ", j);
            }
        }
        printf("\n");
    }
}

int main() {
    struct Graph graph;

    // Initialize graph with 5 vertices
    initGraph(&graph, MAX_VERTICES);

    // Add edges
    addEdge(&graph, 0, 1);
    addEdge(&graph, 0, 2);
    addEdge(&graph, 1, 3);
    addEdge(&graph, 2, 3);
    addEdge(&graph, 3, 4);

    // Display the adjacency list
    displayGraph(&graph);

    return 0;
}


// Task 10: Graph Representation Using Adjacency Matrix
#include <stdio.h>

#define MAX_VERTICES 5

// Function to initialize the graph
void initGraph(int graph[MAX_VERTICES][MAX_VERTICES], int vertices) {
    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            graph[i][j] = 0;
        }
    }
}

// Function to add an edge
void addEdge(int graph[MAX_VERTICES][MAX_VERTICES], int src, int dest) {
    graph[src][dest] = 1;
    graph[dest][src] = 1;  // Since the graph is undirected
}

// Function to display the adjacency matrix
void displayGraph(int graph[MAX_VERTICES][MAX_VERTICES], int vertices) {
    printf("Adjacency Matrix:\n");
    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            printf("%d ", graph[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int graph[MAX_VERTICES][MAX_VERTICES];

    // Initialize graph with 5 vertices
    initGraph(graph, MAX_VERTICES);

    // Add edges
    addEdge(graph, 0, 1);
    addEdge(graph, 1, 2);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 4);
    addEdge(graph, 4, 0);

    // Display the adjacency matrix
    displayGraph(graph, MAX_VERTICES);

    return 0;
}
